// Some references taken from the Lox programming language from
// Crafting Interpreters Textbook
// https://craftinginterpreters.com/appendix-i.html


program ==> declList

declList ==> EOF | declaration declList

declaration ==> funcDecl | varDecl | statement

funcDecl ==> VOID IDENTIFIER LEFT_PAREN parameterDef SCOPE_OPEN statementList
            | varType IDENTIFIER LEFT_PAREN parameterDef SCOPE_OPEN returnStatementList

parameterDef ==> RIGHT_PAREN 
                | varType IDENTIFIER parameterDefList
                | varType IDENTIFIER EQUALS expressionList parameterDefList
                
parameterDefList ==> RIGHT_PAREN 
                | COMMA varType IDENTIFIER parameterDefList
                | COMMA varType IDENTIFIER EQUALS expressionList parameterDefList 

varDecl ==> TYPE IDENTIFIER SEMICOLON
            | TYPE IDENTIFIER EQUALS expressionList SEMICOLON

varType ==> IDENTIFIER | TYPE

statementList ==> SCOPE_CLOSE
                | statement statementList

returnStatementList ==> returnStatement SCOPE_CLOSE
                     | statement returnStatementList

returnStatement ==> RETURN expressionList SEMICOLON

statement ==> varDecl
            | assignment
            | funcCall
            | expressionList SEMICOLON

assignment ==> IDENTIFIER EQUALS expressionList SEMICOLON

funcCall ==> IDENTIFIER LEFT_PAREN parameterCall SEMICOLON

parameterCall ==> RIGHT_PAREN 
                | expressionList parameterCallList

parameterCallList ==> RIGHT_PAREN 
                    | COMMA expressionList parameterCallList


// Strings should be considered standalone terms when parsing expressionLists,
// but should not be allowed in comprehensive expression parsing
// i.e., foo("bar"+3); is not valid, but foo("bar"); is

expressionList ==> expression
                 | STRING

expression ==> term BINARY_OP expression
             | term

term ==> LEFT_PAREN expression RIGHT_PAREN
       | primary

primary ==> INTEGER | IDENTIFIER
