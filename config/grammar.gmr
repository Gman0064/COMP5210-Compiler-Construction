// Some references taken from the Lox programming language from
// Crafting Interpreters Textbook
// https://craftinginterpreters.com/appendix-i.html


program ==> PREPROCESSOR* declaration* EOF

declaration ==> funDecl | varDecl | statement

funDecl ==> varType IDENTIFIER "(" ( varType IDENTIFIER )* ")" returnBlock
            | void IDENTIFIER "(" ( varType IDENTIFIER )* ")" block

varDecl ==> TYPE IDENTIFIER ( "=" expression )? SEMICOLON

SEMICOLON ==> ";"

block ==> "{" declaration* "}"

returnBlock ==> "{" declaration* returnStmt "}"

statement ==> exprStmt
           | forStmt
           | ifStmt
           | returnStmt
           | whileStmt
           | block

exprStmt ==> expression SEMICOLON

forStmt ==> "for" "(" ( varDecl | exprStmt | SEMICOLON )
                           expression? SEMICOLON
                           expression? ")" statement

ifStmt ==> "if" "(" expression ")" block
                 ( "else" block )?


returnStmt ==> "return" expression? SEMICOLON

whileStmt ==> "while" "(" expression ")" block

expression ==> assignment

assignment ==> ( call "." )? IDENTIFIER "=" assignment | logic_or 

logic_or ==> logic_and ( "or" logic_and )*

logic_and ==> equality ( "and" equality )*

equality ==> comparison ( ( "!=" | "==" ) comparison )*

comparison ==> term ( ( ">" | ">=" | "<" | "<=" ) term )*

term ==> factor ( ( "-" | "+" ) factor )*

factor ==> unary ( ( "/" | "*" ) unary )*

unary ==> ( "!" | "-" ) unary | call

call ==> primary ( "(" arguments? ")" | "." IDENTIFIER )*

primary ==> "null" | "this" | TYPE | NUMBER | STRING | IDENTIFIER | "(" expression ")"

varType ==> TYPE | IDENTIFIER